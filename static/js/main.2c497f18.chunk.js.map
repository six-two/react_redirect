{"version":3,"sources":["app/Encoder.ts","app/Decoder.ts","app/App.tsx","app/FieldEditView.tsx","app/CreateLinkView.tsx","serviceWorker.ts","index.tsx"],"names":["checkUrlForErrors","value","match","invalidChars","Set","join","URL","host","e","checkTemplateForErrors","split","length","createRedirectUrl","templateUrl","redirectToUrl","errors","error","push","encoded","btoa","replace","url","VALID_URL_REGEX","findRedirect","uri","result","hash","window","location","href","paramValues","searchParams","values","testString","substr","URLSearchParams","reverse","str","startsWith","decoded","base64","lastBlockSize","slice","atob","decode","console","options","FieldEditView","onValueChange","copy","props","data","row","fieldName","target","setData","rowData","this","checkForErrors","inputClass","undefined","className","label","type","title","description","onChange","React","Component","TARGET_DATA","Encoder","TEMPLATE_DATA","SERVER_DATA","CreateLinkView","link","page","template","rel","EXAMPLE_STATE","Math","floor","random","App","showImportDialog","prompt","redirectUrl","Decoder","alert","parts","splitUrlIntoPageAndParams","newData","setState","loadDefaults","state","renderEditView","onClick","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2c497f18.chunk.js","sourcesContent":["export function checkUrlForErrors(value: string): string {\n  if (!value.match(/^https?:\\/\\/.*/)) {\n    return \"The URL has to start with 'http://' or 'https://' (without the quotes)\"\n  }\n  let invalidChars = value.match(/[ \"<>{}^|]/g);\n  if (invalidChars) {\n    let invalidCharString = [...new Set(invalidChars)].join(\"', '\");\n    return \"The URL contains some illegal characters that have not been properly escaped: '\"\n      + invalidCharString + \"'\";\n  }\n  try {\n    let url = new URL(value);\n    if (!url.host) {\n      return \"The URL has to contain a host (like example.com or 127.0.0.1)\";\n    }\n    return \"\";\n  } catch (e) {\n    return \"Not a valid URL\";\n  }\n}\n\nexport function checkTemplateForErrors(value: string): string {\n  let parts = value.split(\"%s\");\n  if (parts.length !== 2) {\n    return \"Template must contain exactly one '%s' (without the quotes) to signal where to embed the encoded URL\";\n  }\n  return \"\";\n}\n\nexport function createRedirectUrl(templateUrl: string, redirectToUrl: string): Result {\n  let errors = [];\n  let error = checkUrlForErrors(redirectToUrl);\n  if (error) {\n    errors.push(\"Error with 'redirectToUrl': \" + error);\n  }\n\n  error = checkUrlForErrors(templateUrl);\n  if (error) {\n    errors.push(\"Error with 'templateUrl': \" + error);\n  }\n\n  error = checkTemplateForErrors(templateUrl);\n  if (error) {\n    errors.push(\"Error with 'templateUrl': \" + error);\n  }\n\n  const encoded = \"LNK\" + uriSafeEncode(redirectToUrl);\n  const url = templateUrl.replace(\"%s\", encoded);\n  return { errors: errors, url: url };\n}\n\nfunction uriSafeEncode(data: string): string {\n  const base64 = btoa(data);\n  return base64\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\ninterface Result {\n  errors: string[],\n  url: string,\n}\n","const MAGIC_URL_MARKER = \"LNK\"; //Short for LiNK\nconst VALID_URL_REGEX = /^https?:\\/\\//; // check for \"http(s)://\" at beginning\n\n// Search order:\n// first try the complete hash\n// then try parameters from back to front\n\nexport function followRedirect(url?: URL) {\n  let redirect = findRedirect(url);\n  if (redirect) {\n    window.location.replace(redirect);\n  }\n}\n\nexport function findRedirect(uri?: URL) {\n  uri = uri || new URL(window.location.href);\n  let hash = uri.hash;\n  let result;\n  let paramValues = [...uri.searchParams.values()];\n  if (hash) {\n    hash = hash.substr(1); // remove leading #\n    //check if hash itself contains a redirect link\n    result = testString(hash);\n    if (result) {\n      return result;\n    }\n    paramValues = [...paramValues, ...new URLSearchParams(hash).values()];\n  }\n  // check params in reversed order\n  for (let v of paramValues.reverse()) {\n    result = testString(v);\n    if (result) {\n      return result;\n    }\n  }\n}\n\nfunction testString(str: string) {\n  // console.log(\"testing '\" + str + \"'\");\n  try {\n    if (str.startsWith(MAGIC_URL_MARKER)) {\n      str = str.substr(MAGIC_URL_MARKER.length);\n      let decoded = decode(str);\n      if (decoded.match(VALID_URL_REGEX)) {\n        return decoded;\n      }\n    }\n  } catch (e) {\n    console.error(\"Error while decoding possible redirect link:\", e);\n  }\n}\n\n// custom base64 decode with url safe chars and without padding\nfunction decode(base64: string) {\n  base64 = base64\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  // add padding again\n  let lastBlockSize = base64.length % 4;\n  if (lastBlockSize !== 0) {\n    base64 += ('===').slice(0, 4 - lastBlockSize);\n  }\n  return atob(base64);\n}\n","import React from 'react';\nimport './App.scss';\nimport * as Encoder from './Encoder';\nimport * as Decoder from './Decoder';\nimport CreateLinkView, { TextFieldValues } from './CreateLinkView';\n\n// TODOs\n// Improve tutorial / instructions\n// README.md\n\n// --- Nice to have ---\n// Add more templates\n\n\nconst TEMPLATES = [\n  \"#type=email&action=unsubscribe&userId=%s&campaign=Summer2020\",\n  \"#target=www.youtube.com&video=%s\",\n  \"#shop=www.amazon.com&productId=B00V155S46&couponCode=%s\",\n];\n\nconst EXAMPLE_STATE: TextFieldValues = {\n  url: \"https://example.com\",\n  template: randomChoice(TEMPLATES),\n  page: \"https://projects.six-two.dev/react_redirect/follow.html\",\n}\n\nfunction randomChoice<T>(options: T[]): T {\n  return options[Math.floor(Math.random() * options.length)];\n}\n\nexport default class App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"App\">\n      <h1>Create a (deceptive) redirect link</h1>\n      {this.renderEditView()}\n    </div>\n  }\n\n  renderEditView() {\n    if (this.state.data) {\n      return <CreateLinkView data={this.state.data} setData={this.setData} />\n    } else {\n      return <div className=\"initial-buttons\">\n        <button onClick={this.loadDefaults}>\n          Create new link\n        </button>\n        <button onClick={this.showImportDialog}>\n          Import from URL\n        </button>\n      </div>\n    }\n  }\n\n  showImportDialog = () => {\n    let url = window.prompt(\"Input the URL to import the data from\");\n    if (url) {\n      try {\n        let redirectUrl = Decoder.findRedirect(new URL(url));\n        if (!redirectUrl) {\n          alert(\"Your URL does not contain an embedded redirect link\");\n          return;\n        }\n        let encoded = Encoder.createRedirectUrl(\"%s\", redirectUrl).url;//ignore errors\n        let template = url.replace(encoded, \"%s\");\n        let [page, params] = splitUrlIntoPageAndParams(template);\n        let data: TextFieldValues = { page: page, template: params, url: redirectUrl };\n        this.setData(data);\n      } catch (e) {\n        console.error(\"Error importing URL:\", url, \"\\n\", e);\n        alert(\"An error occured while importing the URL. Are you sure it is valid?\");\n      }\n    }\n  }\n\n  setData = (newData: TextFieldValues) => {\n    this.setState({\n      data: newData,\n    });\n  }\n\n  loadDefaults = () => {\n    this.setData(EXAMPLE_STATE);\n  }\n}\n\nfunction splitUrlIntoPageAndParams(url: string): [string, string] {\n  let parts = url.split(\"?\", 2);\n  if (parts.length === 2) {\n    return [parts[0], \"?\" + parts[1]]\n  } else {\n    parts = url.split(\"#\", 2);\n    if (parts.length === 2) {\n      return [parts[0], \"#\" + parts[1]]\n    }\n  }\n  // has no params\n  return [url, \"\"];\n}\n\ninterface State {\n  data?: TextFieldValues,\n}\n","import React from 'react';\nimport { TextFieldValues } from './CreateLinkView';\n\n\nexport default class FieldEditView extends React.Component<Props> {\n  render() {\n    let rowData = this.props.row;\n    let value = this.props.data[rowData.fieldName];\n    let error = rowData.checkForErrors(value);\n    let inputClass = error ? \"error\" : undefined;\n\n    return <div>\n      <div className=\"input-row\">\n        <div className=\"label\">\n          {rowData.label}\n        </div>\n        <div className=\"input\">\n          <input className={inputClass}\n            type=\"text\"\n            title={rowData.description}\n            value={value}\n            onChange={this.onValueChange}\n          />\n        </div>\n      </div>\n      {error ? <div className=\"err-msg\">{error}</div> : null}\n    </div>;\n  }\n\n  onValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let copy: TextFieldValues = { ...this.props.data };\n    copy[this.props.row.fieldName] = e.target.value;\n    this.props.setData(copy);\n  }\n}\n\nexport interface RowDescription {\n  label: string,\n  description: string,\n  checkForErrors: (value: string) => string,\n  fieldName: string,\n}\n\ninterface Props {\n  row: RowDescription,\n  data: TextFieldValues,\n  setData: (newData: TextFieldValues) => void,\n}\n","import React from 'react';\nimport * as Encoder from './Encoder';\nimport FieldEditView, { RowDescription } from './FieldEditView';\n\nconst TARGET_DATA: RowDescription = {\n  label: \"Destination URL\",\n  description: \"The URL that you want the user to be redirected to\",\n  checkForErrors: Encoder.checkUrlForErrors,\n  fieldName: \"url\",\n}\n\nconst TEMPLATE_DATA: RowDescription = {\n  label: \"Template\",\n  description: \"The template can be used to mislead the person viewing the link \" +\n    \"into believing that it has a different purpose (for example to disguise it as an unsubscribe link)\",\n  checkForErrors: Encoder.checkTemplateForErrors,\n  fieldName: \"template\",\n}\n\nconst SERVER_DATA: RowDescription = {\n  label: \"Redirect page URL\",\n  description: \"The URL where your server hosts your redirect page\",\n  checkForErrors: Encoder.checkUrlForErrors,\n  fieldName: \"page\",\n}\n\nexport default class CreateLinkView extends React.Component<Props> {\n  render() {\n    const template = this.props.data.page + this.props.data.template;\n    const link = Encoder.createRedirectUrl(template, this.props.data.url).url;\n\n    return (\n      <div className=\"create-link-root\">\n        <FieldEditView data={this.props.data} setData={this.props.setData} row={TARGET_DATA} />\n        <FieldEditView data={this.props.data} setData={this.props.setData} row={TEMPLATE_DATA} />\n        <FieldEditView data={this.props.data} setData={this.props.setData} row={SERVER_DATA} />\n        <h2>Your link is</h2>\n        <div className=\"link-div\">\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>\n            {link}\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface Props {\n  data: TextFieldValues,\n  setData: (newData: TextFieldValues) => void,\n}\n\nexport interface TextFieldValues {\n  url: string,\n  template: string,\n  page: string,\n  [key: string]: string,//to allow property access using square brackets like in JS\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}