{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["TEMPLATES","App","props","options","state","url","template","Math","floor","random","length","page","encoded","this","uriSafeEncode","params","replace","link","className","renderInputRow","TARGET_DATA","e","setState","target","value","TEMPLATE_DATA","SERVER_DATA","rel","href","event","rowData","onValueChange","error","checkForErrors","inputClass","undefined","label","title","description","type","onChange","data","btoa","React","Component","checkUrlForErrors","match","URL","indexOf","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0OAWMA,G,MAAY,CAChB,+DACA,mCACA,4D,IASIC,E,kDACJ,WAAYC,GAAa,IAAD,EALDC,EAKC,4BACtB,cAAMD,IACDE,MAAQ,CACXC,IAAK,sBACLC,UATmBH,EASIH,EARpBG,EAAQI,KAAKC,MAAMD,KAAKE,SAAWN,EAAQO,UAS9CC,KAAM,2DALc,E,qDASd,IAAD,OACDC,EAAU,MAAQC,KAAKC,cAAcD,KAAKT,MAAMC,KAChDU,EAASF,KAAKT,MAAME,SAASU,QAAQ,KAAMJ,GAC3CK,EAAOJ,KAAKT,MAAMO,KAAOI,EAE/B,OACE,yBAAKG,UAAU,OACb,kEACCL,KAAKM,eAAeC,EAAaP,KAAKT,MAAMC,KAAK,SAACgB,GAAD,OAAY,EAAKC,SAAS,CAAEjB,IAAKgB,EAAEE,OAAOC,WAC3FX,KAAKM,eAAeM,EAAeZ,KAAKT,MAAME,UAAU,SAACe,GAAD,OAAY,EAAKC,SAAS,CAAEhB,SAAUe,EAAEE,OAAOC,WACvGX,KAAKM,eAAeO,EAAab,KAAKT,MAAMO,MAAM,SAACU,GAAD,OAAY,EAAKC,SAAS,CAAEX,KAAMU,EAAEE,OAAOC,WAC9F,4CACA,uBAAGD,OAAO,SAASI,IAAI,sBAAsBC,KAAMX,GAAOA,M,0CAK5CY,GAElBhB,KAAKS,SAAS,CAAEjB,IAAKwB,EAAMN,OAAOC,U,qCAGrBM,EAAuBN,EAAeO,GACnD,IAAIC,EAAQF,EAAQG,eAAeT,GAC/BU,EAAaF,EAAQ,aAAUG,EACnC,OAAO,6BACL,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,SAASY,EAAQM,OAChC,yBAAKlB,UAAU,SACb,2BAAOA,UAAWgB,EAAYG,MAAOP,EAAQQ,YAAaC,KAAK,OAAOC,SAAUT,EAAeP,MAAOA,MAGzGQ,EAAQ,yBAAKd,UAAU,WAAWc,GAAe,Q,oCAIxCS,GAEZ,OADeC,KAAKD,GAEjBzB,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,KAAM,Q,GAnDH2B,IAAMC,WAmExB,SAASC,EAAkBrB,GACzB,IAAKA,EAAMsB,MAAM,kBACf,MAAO,yEAET,GAAItB,EAAMsB,MAAM,eACd,MAAO,+EAET,IACY,IAAIC,IAAIvB,GAClB,MAAO,GACP,MAAOH,GACP,MAAO,mBAIX,IAAMD,EAA4B,CAChCgB,MAAO,kBACPE,YAAa,qDACbL,eAAgBY,GAGZpB,EAA8B,CAClCW,MAAO,WACPE,YAAa,qKACbL,eAAgB,SAACT,GACf,OAAIA,EAAMwB,QAAQ,MAAQ,EACjB,6FAEF,KAILtB,EAA4B,CAChCU,MAAO,oBACPE,YAAa,qDACbL,eAAgBY,GAGH5C,ICpHKgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2DCZNO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.f60fb83e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\n// TODOs\n// Add a tutorial / instructions\n// Make it look nice [partial]\n// Allow signing links?\n// Add debugging features\n// Add (more) templates [partial]\n// Add this to my projects page. Write about stateless web apps on my projects page\n\nconst TEMPLATES = [\n  \"#type=email&action=unsubscribe&userId=%s&campaign=Summer2020\",\n  \"#target=www.youtube.com&video=%s\",\n  \"#shop=www.amazon.com&productId=B00V155S46&couponCode=%s\",\n];\n\n\n\nfunction randomChoice<T>(options: T[]): T {\n  return options[Math.floor(Math.random() * options.length)];\n}\n\nclass App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      url: \"https://example.com\",\n      template: randomChoice(TEMPLATES),\n      page: \"https://projects.six-two.dev/react_redirect/follow.html\",\n    }\n  }\n\n  render() {\n    const encoded = \"LNK\" + this.uriSafeEncode(this.state.url);\n    const params = this.state.template.replace(\"%s\", encoded);\n    const link = this.state.page + params;\n\n    return (\n      <div className=\"App\">\n        <h1>Create a (deceptive) redirect link</h1>\n        {this.renderInputRow(TARGET_DATA, this.state.url, (e: any) => this.setState({ url: e.target.value }))}\n        {this.renderInputRow(TEMPLATE_DATA, this.state.template, (e: any) => this.setState({ template: e.target.value }))}\n        {this.renderInputRow(SERVER_DATA, this.state.page, (e: any) => this.setState({ page: e.target.value }))}\n        <h2>Your link is</h2>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>{link}</a>\n      </div>\n    );\n  }\n\n  onDestinationChange(event: any) {\n\n    this.setState({ url: event.target.value });\n  }\n\n  renderInputRow(rowData: InputRowData, value: string, onValueChange: (e: any) => void) {\n    let error = rowData.checkForErrors(value);\n    let inputClass = error ? \"error\" : undefined;\n    return <div>\n      <div className=\"input-row\">\n        <div className=\"label\">{rowData.label}</div>\n        <div className=\"input\">\n          <input className={inputClass} title={rowData.description} type=\"text\" onChange={onValueChange} value={value} />\n        </div>\n      </div>\n      {error ? <div className=\"err-msg\">{error}</div> : null}\n    </div>;\n  }\n\n  uriSafeEncode(data: string): string {\n    const base64 = btoa(data);\n    return base64\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n  }\n}\n\ninterface State {\n  url: string,\n  template: string,\n  page: string,\n}\n\ninterface InputRowData {\n  label: string,\n  description: string,\n  checkForErrors: (value: string) => string,\n}\n\nfunction checkUrlForErrors(value: string): string {\n  if (!value.match(/^https?:\\/\\/.*/)) {\n    return \"The URL has to start with 'http://' or 'https://' (without the quotes)\"\n  }\n  if (value.match(/[ \"<>{}^|]/g)) {\n    return \"The URL contains some illegal characters that have not been properly escaped\";\n  }\n  try {\n    let url = new URL(value);\n    return \"\";\n  } catch (e) {\n    return \"Not a valid URL\";\n  }\n}\n\nconst TARGET_DATA: InputRowData = {\n  label: \"Destination URL\",\n  description: \"The URL that you want the user to be redirected to\",\n  checkForErrors: checkUrlForErrors,\n}\n\nconst TEMPLATE_DATA: InputRowData = {\n  label: \"Template\",\n  description: \"The template can be used to mislead the person viewing the link into believing that it has a different purpose (for example to disguise it as an unsubscribe link)\",\n  checkForErrors: (value: string) => {\n    if (value.indexOf(\"%s\") < 0) {\n      return \"Template must contain a '%s' (without the quotes) to signal where to embed the encoded URL\";\n    }\n    return \"\";\n  },\n}\n\nconst SERVER_DATA: InputRowData = {\n  label: \"Redirect page URL\",\n  description: \"The URL where your server hosts your redirect page\",\n  checkForErrors: checkUrlForErrors,\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}